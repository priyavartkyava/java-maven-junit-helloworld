pipeline
{
    agent 'any'
    parameters
    {
        string (defaultValue: 'develop',name: 'BRANCH_NAME')
        string (defaultValue: 'STAGE',description: 'Environment To release on',name: 'BUILD_ENV')
        booleanParam(defaultValue: true, description: '', name: 'userFlag')
        choice(name: 'Nodes', choices:"Linux\nMac",description: "Choose Node!")
        choice(name: 'Versions',choices:"3.4\n4.4",description: "Build for which version?" )
        string(name: 'Path',defaultValue:"/home/pencillr/builds/",description: "Where to put the build!")
    }
    tools { maven 'm3' }
    stages
    {
        stage("print params") 
        {
            steps {
                    echo "flag: ${params.userFlag}"
                    echo "${env.userFlag}"
                    echo "${userFlag}"
            }
        }
       stage ('Checkout')
        {
            steps 
            {
              checkout scm  
              sh 'pwd'  
              ansiblePlaybook(credentialsId: 'pipeline_key', inventory: '52.221.195.203,' , playbook: 'jenkins/ansible/play.yml', extras: '-e target_hosts="52.221.195.203"')
              script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    } 
              }
            }
        }
      stage('Package')
        {
            steps
            {
             sh  'mvn package'
            }
        }
      stage('archive')
        {
        steps
            {
                archiveArtifacts 'target/*.jar'
                deleteDir()
            }
        }
stage("build") 
   {
     steps {
        script {
        build(job: "speak-it",parameters:[string(name: 'Nodes', value: "${params.Nodes}"),string(name: 'Versions', value: "${params.Versions}"),string(name: 'Path', value: "${params.Path}")])
              }
         }
    }  
    }    
}
